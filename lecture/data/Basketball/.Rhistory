plot(density(bb$speed_A,na.rm=TRUE),lwd=3)
lines(density(bb_imp_norm$imp$speed_A[,1]),lwd=2,col="red",lty=2)
lines(density(bb_imp_norm$imp$speed_A[,2]),lwd=2,col="navy",lty=2)
lines(density(bb_imp_norm$imp$speed_A[,3]),lwd=2,col="skyblue",lty=2)
lines(density(bb_imp_norm$imp$speed_A[,4]),lwd=2,col="gold",lty=2)
lines(density(bb_imp_norm$imp$speed_A[,5]),lwd=2,col="darkgreen",lty=2)
plot(density(bb$speed_B,na.rm=TRUE),lwd=3)
lines(density(bb_imp_norm$imp$speed_B[,1]),lwd=2,col="red",lty=2)
lines(density(bb_imp_norm$imp$speed_B[,2]),lwd=2,col="navy",lty=2)
lines(density(bb_imp_norm$imp$speed_B[,3]),lwd=2,col="skyblue",lty=2)
lines(density(bb_imp_norm$imp$speed_B[,4]),lwd=2,col="gold",lty=2)
lines(density(bb_imp_norm$imp$speed_B[,5]),lwd=2,col="darkgreen",lty=2)
plot(density(bb$vangle_A,na.rm=TRUE),lwd=3)
lines(density(bb_imp_norm$imp$vangle_A[,1]),lwd=2,col="red",lty=2)
lines(density(bb_imp_norm$imp$vangle_A[,2]),lwd=2,col="navy",lty=2)
lines(density(bb_imp_norm$imp$vangle_A[,3]),lwd=2,col="skyblue",lty=2)
lines(density(bb_imp_norm$imp$vangle_A[,4]),lwd=2,col="gold",lty=2)
lines(density(bb_imp_norm$imp$vangle_A[,5]),lwd=2,col="darkgreen",lty=2)
plot(density(bb$vangle_B,na.rm=TRUE),lwd=3)
lines(density(bb_imp_norm$imp$vangle_B[,1]),lwd=2,col="red",lty=2)
lines(density(bb_imp_norm$imp$vangle_B[,2]),lwd=2,col="navy",lty=2)
lines(density(bb_imp_norm$imp$vangle_B[,3]),lwd=2,col="skyblue",lty=2)
lines(density(bb_imp_norm$imp$vangle_B[,4]),lwd=2,col="gold",lty=2)
lines(density(bb_imp_norm$imp$vangle_B[,5]),lwd=2,col="darkgreen",lty=2)
bb_imp_pmm = mice(bb[,c("hittype","vangle_A","vangle_B","speed_A","speed_B")],m=5,method=c("","pmm","pmm","pmm","pmm"),maxit=20)
plot(density(bb$vangle_B,na.rm=TRUE),lwd=3)
lines(density(bb_imp_pmm$imp$vangle_B[,1]),lwd=2,col="red",lty=2)
lines(density(bb_imp_pmm$imp$vangle_B[,2]),lwd=2,col="navy",lty=2)
lines(density(bb_imp_pmm$imp$vangle_B[,3]),lwd=2,col="skyblue",lty=2)
lines(density(bb_imp_pmm$imp$vangle_B[,4]),lwd=2,col="gold",lty=2)
lines(density(bb_imp_pmm$imp$vangle_B[,5]),lwd=2,col="darkgreen",lty=2)
plot(density(bb$vangle_A,na.rm=TRUE),lwd=3)
lines(density(bb_imp_pmm$imp$vangle_A[,1]),lwd=2,col="red",lty=2)
lines(density(bb_imp_pmm$imp$vangle_A[,2]),lwd=2,col="navy",lty=2)
lines(density(bb_imp_pmm$imp$vangle_A[,3]),lwd=2,col="skyblue",lty=2)
lines(density(bb_imp_pmm$imp$vangle_A[,4]),lwd=2,col="gold",lty=2)
lines(density(bb_imp_pmm$imp$vangle_A[,5]),lwd=2,col="darkgreen",lty=2)
par(mfrow=c(2,2))
plot(density(bb$vangle_A,na.rm=TRUE),lwd=3,main="VAngle A, 20 Iters")
lines(density(bb_imp_pmm$imp$vangle_A[,1]),lwd=2,col="red",lty=2)
lines(density(bb_imp_pmm$imp$vangle_A[,2]),lwd=2,col="navy",lty=2)
lines(density(bb_imp_pmm$imp$vangle_A[,3]),lwd=2,col="skyblue",lty=2)
lines(density(bb_imp_pmm$imp$vangle_A[,4]),lwd=2,col="gold",lty=2)
lines(density(bb_imp_pmm$imp$vangle_A[,5]),lwd=2,col="darkgreen",lty=2)
par(mfrow=c(2,2))
plot(density(bb$vangle_A,na.rm=TRUE),lwd=3,main="VAngle A, 20 Iters")
lines(density(bb_imp_pmm$imp$vangle_A[,1]),lwd=2,col="red",lty=2)
lines(density(bb_imp_pmm$imp$vangle_A[,2]),lwd=2,col="navy",lty=2)
lines(density(bb_imp_pmm$imp$vangle_A[,3]),lwd=2,col="skyblue",lty=2)
lines(density(bb_imp_pmm$imp$vangle_A[,4]),lwd=2,col="gold",lty=2)
lines(density(bb_imp_pmm$imp$vangle_A[,5]),lwd=2,col="darkgreen",lty=2)
plot(density(bb$vangle_B,na.rm=TRUE),lwd=3,main="VAngle B, 20 Iters")
lines(density(bb_imp_pmm$imp$vangle_B[,1]),lwd=2,col="red",lty=2)
lines(density(bb_imp_pmm$imp$vangle_B[,2]),lwd=2,col="navy",lty=2)
lines(density(bb_imp_pmm$imp$vangle_B[,3]),lwd=2,col="skyblue",lty=2)
lines(density(bb_imp_pmm$imp$vangle_B[,4]),lwd=2,col="gold",lty=2)
lines(density(bb_imp_pmm$imp$vangle_B[,5]),lwd=2,col="darkgreen",lty=2)
densityplot(bb_imp_pmm,layout=c(2,2))
densityplot(bb_imp_pmm,layout=c(2,2))
bb_imp_pmm2 = mice(bb[,c("hittype","vangle_A","vangle_B","speed_A","speed_B")],m=20,method=c("","pmm","pmm","pmm","pmm"),maxit=20)
densityplot(bb_imp_pmm2,layout=c(2,2))
bb_imp_norm = mice(bb[,c("hittype","vangle_A","vangle_B","speed_A","speed_B")],m=5,method=c("","norm","norm","norm","norm"),maxit=10,printFlag=FALSE,seed=123)
densityplot(bb_imp_norm,layout=c(2,2))
bb_imp_norm2 = mice(bb[,c("hittype","vangle_A","vangle_B","speed_A","speed_B")],m=5,method=c("","norm","norm","norm","norm"),maxit=20,printFlag=FALSE,seed=421)
densityplot(bb_imp_norm2,layout=c(2,2))
densityplot(bb_imp_pmm,layout=c(2,2))
kmeans(bb$pitcher,centers=3)
# Let's try to cluster these pitchers to potentially help improve the imputation and modeling process.
# When we group the data by the pitchers and take the means of the various features, the kmeans clusters are formed really only based on the number pitches pitched by the pitchers because the rest of the features are very similar across clusters.
bb_pitcher_clust = kmeans(bb$pitcher,centers=3)
bb_pitcher_clust$cluster
bb$pitcher_clust = bb_pitcher_clust$cluster
# Let's try to cluster these pitchers to potentially help improve the imputation and modeling process.
# When we group the data by the pitchers and take the means of the various features, the kmeans clusters are formed really only based on the number pitches pitched by the pitchers because the rest of the features are very similar across clusters.
bb_pitcher_clust = kmeans(bb$pitcher,centers=3)
bb$pitcher_clust = bb_pitcher_clust$cluster
head(bb)
library(fastDummies)
# New imputation
bb_imp_norm3 = mice(bb[,c("hittype","pitcher_clust","vangle_A","vangle_B","speed_A","speed_B",)],m=5,method=c("","", "norm","norm","norm","norm"),maxit=10,printFlag=FALSE,seed=123)
# New imputation
bb_imp_norm3 = mice(bb[,c("hittype","pitcher_clust","vangle_A","vangle_B","speed_A","speed_B")],m=5,method=c("","", "norm","norm","norm","norm"),maxit=10,printFlag=FALSE,seed=123)
densityplot(bb_imp_norm3,layout=c(2,2))
head(bb)
# To get our data ready for input into a stan model, we need to reshape certain aspects.
bb = fastDummies::dummy_cols(bb,select_columns=c("hittype","pitcher_clust"))
head(bb)
bb[,-c("pitcher","hittype","pitcher_clust")]
bb %>%
select(-c("pitcher","hittype","pitcher_clust"))
bb[bb$hittype=="U",]
bb_imp_norm3
bb_imp_norm3$imp$vangle_A
apply(bb_imp_norm3$imp$vangle_A,2,summary)
summary(bb$vangle_A)
apply(bb_imp_norm3$imp$vangle_B,2,summary)
summary(bb$vangle_B)
apply(bb_imp_norm3$imp$speed_A,2,summary)
summary(bb$speed_A)
apply(bb_imp_norm3$imp$speed_B,2,summary)
summary(bb$speed_B)
bb_clean = complete(bb_imp_norm3,1)
dim(bb_clean)
summary(bb_clean)
# To get our data ready for input into a stan model, we need to reshape certain aspects.
bb_clean = fastDummies::dummy_cols(bb_clean,select_columns=c("hittype","pitcher_clust"))
bb_clean = bb_clean %>%
select(-c("pitcher","hittype","pitcher_clust"))
# To get our data ready for input into a stan model, we need to reshape certain aspects.
bb_clean = fastDummies::dummy_cols(bb_clean,select_columns=c("hittype","pitcher_clust"))
bb_clean = bb_clean %>%
select(-c("hittype","pitcher_clust"))
head(bb_clean)
plot(bb_clean$vangle_A,bb_clean$speed_A,pch=20)
plot(bb_clean$vangle_A,bb_clean$speed_A,pch=20)
points(bb_clean$vangle_B,bb_clean$speed_B)
plot(bb_clean$vangle_A,bb_clean$speed_A,pch=20)
points(bb_clean$vangle_B,bb_clean$speed_B,col="red",pch=20)
head(bb)
head(bb_clean)
bb_imp_clean = complete(bb_imp_norm3,1)
bb_clean = cbind(bb$batter,bb_imp_clean)
head(bb_clean)
# To get our data ready for input into a stan model, we need to reshape certain aspects.
bb_clean = fastDummies::dummy_cols(bb_clean,select_columns=c("hittype","pitcher_clust"))
bb_clean = bb_clean %>%
select(-c("hittype","pitcher_clust"))
head(bb_clean)
bb_imp_clean = complete(bb_imp_norm3,1)
bb_clean = cbind(batter=bb$batter,bb_imp_clean)
head(bb_clean)
# To get our data ready for input into a stan model, we need to reshape certain aspects.
bb_clean = fastDummies::dummy_cols(bb_clean,select_columns=c("hittype","pitcher_clust"))
bb_clean = bb_clean %>%
select(-c("hittype","pitcher_clust"))
head(bb_clean)
pairs(bb_clean[,2:13])
cor(bb_clean[,2:13])
2+3
4+4
bb_clean[order(bb_clean$batter),]
bb_imp_clean = complete(bb_imp_norm3,1)
bb_clean = cbind(batter=bb$batter,bb_imp_clean)
head(bb_clean)
# To get our data ready for input into a stan model, we need to reshape certain aspects.
bb_clean = fastDummies::dummy_cols(bb_clean,select_columns=c("hittype","pitcher_clust"))
bb_clean = bb_clean %>%
select(-c("hittype","pitcher_clust")) %>%
arrange(batter)
head(bb_clean)
tail(bb_clean)
bb_clean[bb_clean$hittype_U]
bb_clean[bb_clean$hittype_U==1,]
bb_clean %>% filter(batter %in% c(479,493)) %>% group_by(batter) %>% summarise(n=n())
plot(density(bb_clean[bb_clean$hittype_line_drive==1,]$vangle_A))
plot(density(bb_clean[bb_clean$hittype_line_drive==1,]$vangle_B))
plot(density(bb_clean[bb_clean$hittype_line_drive==1,]$vangle_A))
lines(density(bb_clean[bb_clean$hittype_line_drive==1,]$vangle_B),col="red")
plot(density(bb_clean[bb_clean$hittype_fly_ball==1,]$vangle_A))
lines(density(bb_clean[bb_clean$hittype_fly_ball==1,]$vangle_B),col="red")
line_drive = bb_clean %>% filter(hittype_line_drive==1)
popup = bb_clean %>% filter(hittype_popup==1)
flyball = bb_clean %>% filter(hittype_fly_ball==1)
groudball = bb_clean %.% filter(hittype_ground_ball==1)
line_drive = bb_clean %>% filter(hittype_line_drive==1)
popup = bb_clean %>% filter(hittype_popup==1)
flyball = bb_clean %>% filter(hittype_fly_ball==1)
groudball = bb_clean %>% filter(hittype_ground_ball==1)
plot(density(line_drive$vangle_A),lwd=3)
plot(density(line_drive$vangle_A),lwd=3)
lines(density(popup$vangle_A),lwd=2,col="red")
plot(density(line_drive$vangle_A),lwd=3,xlim=c(-100,100))
lines(density(popup$vangle_A),lwd=2,col="red")
plot(density(line_drive$vangle_A),lwd=3,xlim=c(-100,100))
lines(density(popup$vangle_A),lwd=2,col="red")
lines(density(flyball$vangle_A),lwd=2,col="blue")
plot(density(line_drive$vangle_A),lwd=3,xlim=c(-100,100))
lines(density(popup$vangle_A),lwd=2,col="red")
lines(density(flyball$vangle_A),lwd=2,col="blue")
lines(density(groudball$vangle_A))
plot(density(line_drive$vangle_A),lwd=3,xlim=c(-100,100))
lines(density(popup$vangle_A),lwd=2,col="red")
lines(density(flyball$vangle_A),lwd=2,col="blue")
lines(density(groudball$vangle_A),lwd=2,col="gold")
plot(density(line_drive$vangle_A),lwd=3,xlim=c(-100,100))
lines(density(popup$vangle_A),lwd=2,col="red")
lines(density(flyball$vangle_A),lwd=2,col="blue")
lines(density(groudball$vangle_A),lwd=2,col="gold")
lines(density(line_drive$vangle_B),lwd=3,lty=2)
lines(density(popup$vangle_B),lwd=2,col="red",lty=2)
lines(density(flyball$vangle_B),lwd=2,col="blue",lty=2)
lines(density(groudball$vangle_B),lwd=2,col="gold",lty=2)
plot(density(line_drive$vangle_A),lwd=3,xlim=c(-100,100))
lines(density(popup$vangle_A),lwd=2,col="red")
lines(density(flyball$vangle_A),lwd=2,col="blue")
lines(density(groudball$vangle_A),lwd=2,col="gold")
lines(density(line_drive$vangle_B),lwd=3,lty=2)
lines(density(popup$vangle_B),lwd=2,col="red",lty=2)
lines(density(flyball$vangle_B),lwd=2,col="blue",lty=2)
lines(density(groudball$vangle_B),lwd=2,col="gold",lty=2)
legend("topleft",legend=c("line drive","popup","flyball", "ground ball"),col=c("black","red","blue","gold"),lty=1,lwd=2)
plot(density(line_drive$speed_A),lwd=3,xlim=c(-100,100))
lines(density(popup$speed_A),lwd=2,col="red")
lines(density(flyball$speed_A),lwd=2,col="blue")
lines(density(groudball$speed_A),lwd=2,col="gold")
lines(density(line_drive$speed_B),lwd=3,lty=2)
lines(density(popup$speed_B),lwd=2,col="red",lty=2)
lines(density(flyball$speed_B),lwd=2,col="blue",lty=2)
lines(density(groudball$speed_B),lwd=2,col="gold",lty=2)
legend("topleft",legend=c("line drive","popup","flyball", "ground ball"),col=c("black","red","blue","gold"),lty=1,lwd=2)
plot(density(line_drive$speed_A),lwd=3,xlim=c(0,200))
lines(density(popup$speed_A),lwd=2,col="red")
lines(density(flyball$speed_A),lwd=2,col="blue")
lines(density(groudball$speed_A),lwd=2,col="gold")
lines(density(line_drive$speed_B),lwd=3,lty=2)
lines(density(popup$speed_B),lwd=2,col="red",lty=2)
lines(density(flyball$speed_B),lwd=2,col="blue",lty=2)
lines(density(groudball$speed_B),lwd=2,col="gold",lty=2)
legend("topleft",legend=c("line drive","popup","flyball", "ground ball"),col=c("black","red","blue","gold"),lty=1,lwd=2)
plot(density(line_drive$speed_A),lwd=3,xlim=c(0,200),ylim=c(0,.05))
lines(density(popup$speed_A),lwd=2,col="red")
lines(density(flyball$speed_A),lwd=2,col="blue")
lines(density(groudball$speed_A),lwd=2,col="gold")
lines(density(line_drive$speed_B),lwd=3,lty=2)
lines(density(popup$speed_B),lwd=2,col="red",lty=2)
lines(density(flyball$speed_B),lwd=2,col="blue",lty=2)
lines(density(groudball$speed_B),lwd=2,col="gold",lty=2)
legend("topleft",legend=c("line drive","popup","flyball", "ground ball"),col=c("black","red","blue","gold"),lty=1,lwd=2)
head(bb_clean)
model.matrix(matrix(rnorm(30),ncol=3))
matrix(rnorm(30),ncol=3)
data.frame(matrix(rnorm(30),ncol=3))
model.matrix(data.frame(matrix(rnorm(30),ncol=3)))
?model.matrix
model.matrix(speed_A~.,data=bb_clean[,c("speed_A","vangle_A","hittype_line_drive","hittype_popup","hittype_fly_ball","hittype_ground_ball")])
X = model.matrix(speed_A~.,data=bb_clean[,c("speed_A","vangle_A","hittype_line_drive","hittype_popup","hittype_fly_ball","hittype_ground_ball")])
N = nrow(bb_clean)
J = length(unique(bb_clean$batter))
K = ncol(X)
id = bb_clean$batter
y = bb_clean$speed_A
dim(X)
folder_path = "/Users/samuelluxenberg/OneDrive/Jobs_Internships/Tampa Bay Rays/"
stan_file_path = paste(folder_path,"battedBalls.stan",sep="")
modelA = stan(file=stan_file_path,data=list(N=N,J=J,X=X,K=K,id=id,y=y))
stan_file_path = paste(folder_path,"battedBalls.stan",sep="")
modelA = stan(file=stan_file_path,data=list(N=N,J=J,X=X,K=K,id=id,y=y))
id
X = model.matrix(speed_A~.,data=bb_clean[,c("speed_A","vangle_A","hittype_line_drive","hittype_popup","hittype_fly_ball","hittype_ground_ball")])
N = nrow(bb_clean)
J = length(unique(bb_clean$batter))
K = ncol(X)
id = as.numeric(bb_clean$batter)
y = bb_clean$speed_A
id
stan_file_path = paste(folder_path,"battedBalls.stan",sep="")
modelA = stan(file=stan_file_path,data=list(N=N,J=J,X=X,K=K,id=id,y=y))
dim(X)
N
J
K
id
y
id
length(id)
unique(id)
X[100,]
id[70000]
X[70000,]
stan_file_path = paste(folder_path,"battedBalls.stan",sep="")
modelA = stan(file=stan_file_path,data=list(N=N,J=J,X=X,K=K,id=id,y=y))
5+5
bb_agg = bb_clean %>%
group_by(batter) %>%
summarise(n=n(),
speedA_mean = mean(speed_A),
speedB_mean = mean(speed_B),
vangleA_mean = mean(vangle_A),
vangleB_mean = mean(vangle_B),
line_drive_pct = mean(hittype_line_drive),
popup_pct = mean(hittype_popup),
flyball_pct = mean(hittype_fly_ball),
groundball_pct = mean(hittype_ground_ball))
head(bb_agg,20)
X = model.matrix(speedA_mean~.,data=bb_agg[,c("speedA_mean","vangleA_mean","line_drive_pct","popup_pct","flyball_pct","groundball_pct")])
N = nrow(bb_agg)
J = length(bb_agg$batter)
K = ncol(X)
#id = as.numeric(bb_clean$batter)
y = bb_agg$speedA_mean
dim(X)
X
N
J
K
y
stan_file_path = paste(folder_path,"battedBalls.stan",sep="")
modelA = stan(file=stan_file_path,data=list(N=N,X=X,K=K,y=y))
stan_file_path = paste(folder_path,"battedBalls.stan",sep="")
options(mc.cores=parallel::detectCores())
rstan_options(auto_write=TRUE)
modelA = stan(file=stan_file_path,data=list(N=N,X=X,K=K,y=y),seed=42)
# lots of issues
modelA
stan_trace(modelA,pars=c("beta[1,2]","beta[2,4]"),inc_warmup = TRUE)
stan_file_path = paste(folder_path,"battedBalls.stan",sep="")
options(mc.cores=parallel::detectCores())
rstan_options(auto_write=TRUE)
modelA = stan(file=stan_file_path,data=list(N=N,X=X,K=K,y=y),seed=42,iter=500,control=list(stepsize=.01,adapt_delta=.99,max_treedepth=10))
# lots of issues
print(modelA,pars=c(beta)
# lots of issues
stan_trace(modelA,pars=c("beta[1,2]"))
modelA_lm = lm(bb_agg$speedA_mean~X=1)
modelA_lm
library(dplyr)
library(rstan)
library(fastDummies)
r1 = c(1,1,1,1,1,1,-1,-1,-1,-1,-1,-1)
r2 = c(1,-1,1,-1,1,-1,1,-1,1,-1,1,-1)
acf(r1)
acf(r2)
lag(r1)
lag(r1,1)
lag(r1,4)
library(dplyr)
lagr1 = lag(r1)
lagr1
lagr1 = lagr1[-1]
corr(r1,lagr1)
cor(r1,lagr1)
cor(r1[2:,],lagr1)
cor(r1[2:length(r1),],lagr1)
cor(r1[2:length(r1)],lagr1)
lagr2 = lag(r2)
lagr2 = lagr2[-1]
cor(r2[2:length(r2)],lagr2)
mu = 41.78
(mu-1)*(mu-2)/(82-1)
z = (41-41.78)/sqrt(20.03)
z
1-pnorm(abs(z))
2*1-pnorm(abs(z)))
2*(1-pnorm(abs(z)))
library(tidyverse)
library(hoopR)
install.packages('tidyverse')
install.packages('hoopR')
library(tidyverse)
library(hoopR)
nba_game_log = nba_leaguegamelog(season=2022)
nba_game_log
nba_game_log = nba_game_log$LeagueGameLog
nba_game_log
# Get the regular season game IDs:
nba_season_games = nba_game_log |>
pull(GAME_ID) |>
unique()
nba_season_games
gd = nba_pbp("0022200842")
gd
View(gd)
View(gd)
gd |> fill(home_score, away_score, score_margin)
gd2 = gd |> fill(home_score, away_score, score_margin)
gd2[,c('home_score','away_score','score_margin')]
gd[,c('home_score','away_score','score_margin')]
dplyr::select(gd, home_player1, home_player2, home_player3,
home_player4, home_player5)
apply(dplyr::select(gd, home_player1, home_player2, home_player3,
home_player4, home_player5),1,function(x) {paste(sort(x), collapse=("_"))}
)
x3 = matrix(c(87,5,50,15,2,3,66,5,43,269,13,310,51,4,51,307,7,391,117,4,85,48,3,28,95,4,75,54,1,37,41,10,31,46,7,59),byrow=TRUE,nrow=4,ncol=9)
x3
prop.table(x3, margin=1)
x3_prop = prop.table(x3, margin=1)
dist(x3_prop)
dist(x3_prop, method="euclidean")
dist(x3_prop, method="manhattan")
dist(x3_prop, method="euclidean")^2
install.packages('tictoc')
tictoc::tic()
progressr::with_progress({
nba_pbp <- hoopR::load_nba_pbp(2021:hoopR::most_recent_nba_season())
})
tictoc::toc()
nba_pbp
glue::glue("{nrow(nba_pbp)} rows of nba play-by-play data from {length(unique(nba_pbp$game_id))} games.")
dplyr::glimpse(nba_pbp)
tictoc::tic()
progressr::with_progress({
nba_pbp <- hoopR::load_nba_pbp(2021:hoopR::most_recent_nba_season(), on_court=TRUE)
})
tictoc::toc()
dplyr::glimpse(nba_pbp)
nba_pbps(
game_ids = c("0022201086", "0022200021"),
on_court = TRUE,
version = "v2"
)
getwd()
setwd('OneDrive/GW/Teaching/DNSC 6290/data')
ls
ls()
dir()
setwd('Basketball')
dir
dir()
# data
df_players = read.csv('nba_2223_player_table.csv')
df_stints = read.csv('nba_2223_season_stints.csv')
head(df_stints)
game_stint_context <- df_stints |>
dplyr::select(game_id, stint_id, n_pos, home_points, away_points,
minutes, margin)
head(game_stint_context)
home_players_data <- df_stints %>%
dplyr::select(game_id, stint_id, home_lineup) %>%
separate_rows(home_lineup, sep = "_") %>%
mutate(on_court = 1) %>%
pivot_wider(id_cols = c("game_id", "stint_id"),
names_from = home_lineup,
values_from = on_court,
values_fill = 0)
library(tidyverse)
# 2. home tea players with value 1
home_players_data <- df_stints %>%
dplyr::select(game_id, stint_id, home_lineup) %>%
separate_rows(home_lineup, sep = "_") %>%
mutate(on_court = 1) %>%
pivot_wider(id_cols = c("game_id", "stint_id"),
names_from = home_lineup,
values_from = on_court,
values_fill = 0)
head(home_players_data)
# Check columns are unique players
home_players_cols <- colnames(home_players_data)[3:ncol(home_players_data)]
length(home_players_cols) == length(unique(home_players_cols))
# Repeat for away except use -1
away_players_data <- df_stints %>%
dplyr::select(game_id, stint_id, away_lineup) %>%
separate_rows(away_lineup, sep = "_") %>%
mutate(on_court = -1) %>%
pivot_wider(id_cols = c("game_id", "stint_id"),
names_from = away_lineup,
values_from = on_court,
values_fill = 0)
head(away_players_data)
# Check columns are unique players
away_players_cols <- colnames(away_players_data)[3:ncol(away_players_data)]
length(away_players_cols) == length(unique(away_players_cols))
# Stack home and away together, take sum so that we get one row for each stint
game_stint_players_data <- home_players_data |>
bind_rows(away_players_data) |>
group_by(game_id, stint_id) |>
summarize(across(everything(), ~ sum(.x, na.rm = TRUE)),
.groups = "drop")
game_stint_players_data
game_stint_players_data[,-10:ncol(game_stint_players_data)]
game_stint_players_data[,530:541]
home_players_data |>
bind_rows(away_players_data)
df = home_players_data |>
bind_rows(away_players_data)
df
df[,530:541]
df = home_players_data |>
bind_rows(away_players_data) |>
group_by(game_id, stint_id)
df
df[,530:541]
game_stint_rapm_data <- game_stint_context |>
left_join(game_stint_players_data,
by = c("game_id", "stint_id"))
game_stint_rapm_data
head(game_stint_rapm_data)
game_stint_rapm_data[1:5,1:10]
game_stint_rapm_data[1:5,7]
X = game_stint_rapm_data[,8:ncol(game_stint_rapm_data)]
reg1 = lm(y=y, x=X)
y = game_stint_rapm_data[,7]
X = game_stint_rapm_data[,8:ncol(game_stint_rapm_data)]
reg1 = lm(y=y, x=X)
reg1 = lm(y~X)
help(lm)
type(X)
class(X)
df = data.frame(y=y, X=X)
dim(df)
head(df)
reg1 = lm(y~., data=df)
summary(reg1)
reg1 = lm(y~.-1, data=df)
summary(reg1)
library(glmnet)
install.packages('glmnet')
library(glmnet)
seq(0,20000, by=500)
lambda_vals = seq(0,20000,by=500)
ridge_cv = cv.glmnet(X, y, alpha=0, lambda=lambda_vals)
ridge_cv = cv.glmnet(as.matrix(X), y, alpha=0, lambda=lambda_vals)
plot(ridge_cv)
optimal_lambda = ridge_cv$lambda.min
cat('optimal lambda: ', optimal_lambda, '\n')
ridge_model = glmnet(as.matrix(X), y, alpha=0, lambda=optimal_lambda)
print(coef(ridge_model))
preds = predict(ridge_model, newx=as.matrix(X))
y_mean = mean(y)
tss = sum((y-y_mean)^2)
rss = sum((y-preds)^2)
rsq = 1-rss/tss
cat('r-squared ', rsq)
